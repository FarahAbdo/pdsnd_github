# -*- coding: utf-8 -*-
"""bikeshare.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P2yVYwuEUw2-bJXra4_zhJ2jYrrc9LGT
"""

import time
import pandas as pd
import numpy as np

CITIES = {
    'chicago': 'chicago.csv',
    'new york city': 'new_york_city.csv',
    'washington': 'washington.csv'
}

def get_user_filters():
    print('Hello!')
    print('-' * 40 + '\n')

    city = get_city()
    filter_choice, month, day = get_filters()

    return city, filter_choice, month, day

def get_city():
    while True:
        city = input("Would you like to see data for Chicago, New York City, or Washington? ").lower()
        if city in CITIES:
            return city
        else:
            print("Invalid input. Please choose from: Chicago, New York City, or Washington.")

def get_filters():
    filter_choice = input("Filter data by month, day, both, or none? ").lower()

    if filter_choice == 'both':
        month = get_month()
        day = get_day()
    elif filter_choice == 'month':
        month = get_month()
        day = 'none'
    elif filter_choice == 'day':
        month = 'none'
        day = get_day()
    else:
        month = 'none'
        day = 'none'

    return filter_choice, month, day

def get_month():
    months = ['all', 'january', 'february', 'march', 'april', 'may', 'june']

    while True:
        month = input("Which month (all, january, february, march, april, may, june)? ").lower()
        if month in months:
            return month
        else:
            print("Invalid input. Please choose a correct month.")

def get_day():
    days = ['all', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']

    while True:
        day = input("Which day of the week (all, monday, tuesday, etc.)? ").lower()
        if day in days:
            return day
        else:
            print("Invalid input. Please choose a correct day.")

def load_data(city, month, day):
    df = pd.read_csv(CITIES[city])
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.day_name()

    if month != 'all':
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        if month in months:
            month = months.index(month) + 1
            df = df[df['month'] == month]
        else:
            print("Invalid month selection. No filtering by month will be applied.")

    if day != 'all':
        if day.lower() in ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']:
            df = df[df['day_of_week'].str.lower() == day.lower()]
        else:
            print("Invalid day selection. No filtering by day will be applied.")

    return df


def time_stats(df, filter_choice):
    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()
    if filter_choice != 'none':
        print(f"Data was filtered by: {filter_choice}\n")
    else:
        print("Data wasn't filtered\n")

    common_month = df['month'].mode()[0]
    print(f'The most common month is: {common_month}, Number of occurrences = {(df["month"] == common_month).sum()}')

    common_day_of_week = df['day_of_week'].mode()[0]
    print(f'The most common day of the week is: {common_day_of_week}, Number of occurrences = {(df["day_of_week"] == common_day_of_week).sum()}')

    df['hour'] = df['Start Time'].dt.hour
    common_start_hour = df['hour'].mode()[0]
    print(f'The most common start hour is: {common_start_hour}, Number of occurrences = {(df["hour"] == common_start_hour).sum()}')

    print(f"\nThis took {time.time() - start_time} seconds.")
    print('-' * 40)

def station_stats(df, filter_choice):
    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()
    if filter_choice != 'none':
        print(f"Data was filtered by: {filter_choice}\n")
    else:
        print("Data wasn't filtered\n")

    common_start_station = df['Start Station'].mode()[0]
    print(f"Most commonly used start station is: {common_start_station}, Number of occurrences = {(df['Start Station'] == common_start_station).sum()}")

    common_end_station = df['End Station'].mode()[0]
    print(f"Most commonly used end station is: {common_end_station}, Number of occurrences = {(df['End Station'] == common_end_station).sum()}")

    df['Start&End Station'] = df['Start Station'] + ',' + df['End Station']
    most_frequent_combination_start_and_end_station = df['Start&End Station'].mode()[0]
    print(f'Most frequent combination of start station and end station trip is: {most_frequent_combination_start_and_end_station}, Number of occurrences = {(df["Start&End Station"] == most_frequent_combination_start_and_end_station).sum()}')

    print(f"\nThis took {time.time() - start_time} seconds.")
    print('-' * 40)

def trip_duration_stats(df, filter_choice):
    print('\nCalculating Trip Duration...\n')
    start_time = time.time()
    if filter_choice != 'none':
        print(f"Data filtered by: {filter_choice}\n")
    else:
        print("Not filtered\n")

    total_travel_time = df['Trip Duration'].sum()
    print(f'The total travel time is: {total_travel_time}')

    avg_travel_time = df['Trip Duration'].mean()
    print(f'Average travel time is: {avg_travel_time:.2f}')
    print(f'Count of trips = {df["Trip Duration"].count()}')

    print(f"\nThis took {time.time() - start_time} seconds.")
    print('-' * 40)

def user_stats(df, city, filter_choice):
    print('\nCalculating User Stats...\n')
    start_time = time.time()
    if filter_choice != 'none':
        print(f"Data was filtered by: {filter_choice}\n")
    else:
        print("Data wasn't filtered\n")

    user_type_counts = df['User Type'].value_counts()
    print(user_type_counts.to_string() + '\n')

    if city in ['chicago', 'new york city']:
        gender_counts = df['Gender'].value_counts()
        print(gender_counts.to_string() + '\n')

        earliest_birth_year = df['Birth Year'].min()
        most_recent_birth_year = df['Birth Year'].max()
        common_birth_year = df['Birth Year'].mode()[0]

        print(f'Earliest year of birth is: {earliest_birth_year:.0f}')
        print(f'Most recent year of birth is: {most_recent_birth_year:.0f}')
        print(f'Most common year of birth is: {common_birth_year:.0f}, Number of occurrences = {(df["Birth Year"] == common_birth_year).sum()}')

    print(f"\nThis took {time.time() - start_time} seconds.")
    print('-' * 40)

def display_data(df):
    view_data = input("Would you like to view 5 rows of individual trip data? Enter yes or no: ").lower()
    start_loc = 0
    while view_data == 'yes':
        print(df.iloc[start_loc:start_loc+5])
        start_loc += 5
        view_data = input("Do you wish to continue? Enter yes or no: ").lower()

def main():
    while True:
        city, filter_choice, month, day = get_user_filters()
        df = load_data(city, month, day)
        time_stats(df, filter_choice)
        station_stats(df, filter_choice)
        trip_duration_stats(df, filter_choice)
        user_stats(df, city, filter_choice)
        display_data(df)
        restart = input('\nWould you like to restart? Enter yes or no: ').lower()
        if restart != 'yes':
            break

if __name__ == "__main__":
    main()

